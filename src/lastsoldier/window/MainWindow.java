/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lastsoldier.window;

import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferStrategy;
import javax.swing.JOptionPane;
import lastsoldier.clases.Map;
import lastsoldier.clases.World;
import lastsoldier.worlds.Celestial;
import lastsoldier.worlds.Infernal;
import lastsoldier.worlds.Limbo;

/**
 *
 * @author Jacobo
 */
public class MainWindow extends javax.swing.JFrame {
    
    private BufferStrategy bufferStrategy;
    private World world;
    private Map map;
    private boolean gameOver; // Nueva bandera para controlar el estado del juego

    /**
     * Creates new form MainWindow
     * @param map1
     */
    public MainWindow(Map map1) {
        initComponents();   
        this.map = map1;
        this.gameOver = false; // Inicializar la bandera en false
    }
    
    public void setWorld(World world){
        this.world = world;
        startHearthAndEnemyThreads();
    }
    
    /**
    * Comienza el hilo de los enemigos 
    * Aumenta las vidas del soldado cada que haya colisión con el corazon
    * @see lastsoldier.clases.World#increaseScore(java.awt.event.MouseEvent) 
    * @see lastsoldier.clases.World#moveEnemies() 
    */
    public void startHearthAndEnemyThreads() {
        Thread enemyThread = new Thread(() -> {
            try {
                // Espera inicial de 1 segundo antes de que los enemigos comiencen a moverse
                Thread.sleep(1500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            while (true) {
                if (gameOver) break; // Salir del bucle si el juego ha terminado
                world.increaseSoldierLives();
                world.moveEnemies();
                repaint();

                try {
                    Thread.sleep(40); // Ajusta la velocidad de movimiento de los enemigos
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        enemyThread.start();
    }
    
    @Override
    public void addNotify() {
        super.addNotify();
        createBufferStrategy(2);  // Doble búfer
        bufferStrategy = getBufferStrategy();
    }
    
    /**
    * Pinta los dibujos realizados en World y Map
    * Implementa bufferStrategy por problemas de repintado
    * @param g
    * @see lastsoldier.clases.World#draw(java.awt.Graphics) 
    */
    @Override
    public void paint(Graphics g){
        if (bufferStrategy == null) {
            super.paint(g);
            return;
        }

        do {
            do {
                g = bufferStrategy.getDrawGraphics();
                g.clearRect(0, 0, getWidth(), getHeight()); // Limpiar la pantalla
                
                world.draw(g);
                selectGameOption();
                world.draw(g);
                
                g.dispose();
            } while (bufferStrategy.contentsRestored());

            bufferStrategy.show();
        } while (bufferStrategy.contentsLost());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Maneja eventos de teclado
    * @param evt
    * @see lastsoldier.clases.World#keyPressed(int) 
    */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        
        if (evt.getKeyCode() == KeyEvent.VK_Q) {
            world.saveGameData();
            System.exit(0);
        }
        if (evt.getKeyCode() == KeyEvent.VK_RIGHT | evt.getKeyCode() == KeyEvent.VK_LEFT
            | evt.getKeyCode() == KeyEvent.VK_UP | evt.getKeyCode() == KeyEvent.VK_DOWN) {

            world.keyPressed(evt.getKeyCode());
            repaint();
        }
    }//GEN-LAST:event_formKeyPressed

    /**
    * Maneja eventos de ratón
    * @param evt
    * @exception NullPointerException
    * @see lastsoldier.clases.World#keyPressed(int) 
    */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        
        if (evt.getButton() == MouseEvent.BUTTON1) {
            try {
                if (world.getSoldier().getLives() != 0) {
                    map.removeEnemy(evt, world);
                    repaint();
                }
            }
            catch (NullPointerException e){
                JOptionPane.showMessageDialog(this, "You can´t kill, you´re dead");
            }
        }
    }//GEN-LAST:event_formMousePressed

    /**
    * Abre el menú para seleccionar la opción de reiniciar
    * Llama al método restartGame para reiniciar o sino, sale
    * @see paquete.Clase#metodo Código al que se hace referencia
    */
    public void selectGameOption() {
        // Verifica si el soldado es nulo antes de acceder a sus métodos y si el juego ya terminó
        if (!gameOver && (world.getSoldier() == null || map.getEnemies().isEmpty())){

            gameOver = true; // Marca el juego como terminado para evitar bucles infinitos
            int dialogueButton = JOptionPane.showConfirmDialog(this, "Would you like to play again?", "Play Again", JOptionPane.YES_NO_OPTION);

            if (dialogueButton == JOptionPane.YES_OPTION) {
                restartGame(); 
            } else {
                System.exit(0);
            }
        }
    }

    /**
    * Reinicia las configuraciones del mundo
    * @see lastsoldier.clases.World#reset(int) 
    */
    private void restartGame() {
        // Permitir al jugador seleccionar un nuevo mapa
        String option;

        try {
            option = JOptionPane.showInputDialog("¿What world would you like to play?");
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "The user has cancelled the action");
            option = ""; // Para que entre a los condicionales porque sino lo toma como null
        }
        
        // Determinar el tipo de mapa seleccionado
        int type = 0;
        if ("celestial".equalsIgnoreCase(option)) {
            type = Map.TYPE_ANGEL;
        } else if ("infernal".equalsIgnoreCase(option)) {
            type = Map.TYPE_DEMON;
        } else if ("limbo".equalsIgnoreCase(option)) {
            type = Map.TYPE_FORGOTTEN;
        }

        // Reiniciar el estado del juego
        world.reset(type);
        // world.setMap(option);
        gameOver = false;
        startHearthAndEnemyThreads(); // Reiniciar los hilos de enemigos y corazones
        repaint();
    }

    /**
     * Método principal donde se intancia el mundo, los mapas y la ventana
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        MainWindow ventana = null; 
        String option;

        try {
            option = JOptionPane.showInputDialog("What world would you like to play?");
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "The user has cancelled the action");
            option = ""; // Para que entre a los condicionales porque sino lo toma como null
        }
                
        if ("celestial".equalsIgnoreCase(option)) {
            ventana = new MainWindow(new Celestial(0, 0, 800, 600));
        } else if ("infernal".equalsIgnoreCase(option)) {
            ventana = new MainWindow(new Infernal(0, 0, 800, 600));
        } else if ("limbo".equalsIgnoreCase(option)) {
            ventana = new MainWindow(new Limbo(0, 0, 800, 600));
        }
        
        if (ventana != null) {
            World w = new World(0, 0, 800, 600, ventana.map);
            ventana.setWorld(w);

            ventana.setSize(800, 600);
            ventana.setVisible(true);
            
        } else {
            JOptionPane.showMessageDialog(null, "The user has entered an incorrect option");
        }
    }             
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
